#!/usr/bin/env python3
#-*- coding:utf-8 -*-

"""
xor strings
options:
    -s  -  string with \\xAF escapes
    -r  -  raw string
    -h  -  hex-encoded string (non-letterdigit chars are stripped)
    -f  -  read data from file (- for stdin)

    --newline -  newline at the end (default)
    -n / --no-newline -  no newline at the end
    --cycle - do not pad (default)
    --no-cycle / --nc  -  pad smaller strings with null bytes
example: xor -s lol -h 414243 -f /etc/passwd

author: hellman ( hellman1908@gmail.com )
"""

import getopt
import math
import string
import sys

import numpy as np


def main():
    cycle = True
    newline = True
    try:
        opts, _ = getopt.getopt(
            sys.argv[1:], "ns:r:h:f:",
            ["cycle", "no-cycle", "nc", "no-newline", "newline"])
        datas = []
        for c, val in opts:
            if c == "--cycle":
                cycle = True
            elif c in ("--no-cycle", "--nc"):
                cycle = False
            elif c == "--newline":
                newline = True
            elif c in ("-n", "--no-newline"):
                newline = False
            else:
                datas.append(arg_data(c, val))
        if not datas:
            raise getopt.GetoptError("no data given")
    except getopt.GetoptError as e:
        print("error:", e, file=sys.stderr)
        print(__doc__, file=sys.stderr)
        quit()

    xored = xor(datas, cycle=cycle)
    if hasattr(sys.stdout, 'buffer'):
        sys.stdout.buffer.write(xored)
    else:
        sys.stdout.write(xored)
    if newline:
        sys.stdout.write("\n")


def xor(args, cycle=True):
    # Sort by len DESC
    args.sort(key=len, reverse=True)
    res = np.array(list(args.pop(0)), dtype=np.uint8)
    maxlen = res.shape[0]

    for s in args:
        sa = np.array(list(s), dtype=np.uint8)
        slen = sa.shape[0]
        if cycle:
            repeats = math.ceil(maxlen / slen)
            sa_xor = np.tile(sa, repeats)[0:maxlen]
            res = res ^ sa_xor
        else:
            res[0:slen] = res[0:slen] ^ sa

    return bytes(res)


def from_str(s):
    res = b''
    for char in s.encode("utf-8").decode("unicode_escape"):
        res += bytes([ord(char)])
    return res


def from_file(s):
    if s == "-":
        s = sys.stdin.fileno()
    with open(s, "rb") as fd:
        return fd.read()


def arg_data(opt, s):
    if opt == "-s":
        return from_str(s)
    if opt == "-r":
        return str.encode(s)
    if opt == "-h":
        return bytes.fromhex(s)
    if opt == "-f":
        return from_file(s)
    return getopt.GetoptError("unknown option -%s" % opt)


if __name__ == '__main__':
    main()
